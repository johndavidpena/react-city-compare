{"version":3,"sources":["api/openWeatherKey.js","logic/getOpenWeatherUrl.js","logic/parseCityData.js","logic/handleFocus.js","containers/Unsplash/UnsplashOriginal.jsx","components/Weather/Weather.jsx","containers/City/City.jsx","api/unsplashKey.js","App.jsx","serviceWorker.js","index.js"],"names":["apiKey","getOpenWeatherUrl","position","concat","latitude","longitude","parseCityData","res","round","n","Math","cityName","data","city","name","population","weatherStatusDescription","list","weather","description","weatherId","id","weatherDate","formattedDate","t","date","Date","getUTCDate","month","getUTCMonth","year","getUTCFullYear","convert","monthNum","monthName","convertMonth","getDate","dt","weatherTemp","main","temp","weatherHumidity","humidity","weatherWindSpeed","wind","speed","weatherWindDirection","windDirection","windDegrees","getWindDirection","deg","handleFocus","event","console","log","currentTarget","select","Image","_ref","image","styles","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","react_default","a","createElement","className","style","Unsplash","props","UnsplashOriginal_Image","key","pics","urls","regular","Weather","City","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","findCurrentLocation","navigator","geolocation","getCurrentPosition","openWeatherUrl","coords","getCityInfo","setState","error","searchHandler","input","document","getElementById","autocomplete","window","google","maps","places","Autocomplete","types","addListener","place","getPlace","lat","geometry","location","lng","state","unsplashPics","_this2","axios","get","then","total","picsArray","toConsumableArray","results","catch","err","url","_this3","parsedCityData","getUnsplashPics","loading","onClick","placeholder","type","onChange","onFocus","components_Weather_Weather","weatherMin","weatherMax","UnsplashOriginal","Component","App","containers_City_City","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2501be5.chunk.js","sourcesContent":["// This is nextgtrgod's api key from his react-forecast app\nexport const apiKey = '77e577e4c9e13e85b8e39f71194aea31';\n","import { apiKey } from '../api/openWeatherKey';\n\nfunction getOpenWeatherUrl(position) {\n  let protocol = process.env.NODE_ENV === 'production' ? 'https' : 'http';\n\n  let url = `${protocol}://api.openweathermap.org/data/2.5/forecast?&lang=en&units=imperial&appid=${apiKey}&lat=${\n    position.latitude\n  }&lon=${position.longitude}`;\n\n  return url;\n}\n\nexport default getOpenWeatherUrl;\n","function parseCityData(res) {\n  let round = n => Math.round(n);\n\n  let convert = t => {\n    let date = new Date(t);\n    return {\n      date: date.getUTCDate(),\n      month: date.getUTCMonth(),\n      year: date.getUTCFullYear()\n    };\n  };\n\n  let getDate = data => {\n    let dateNumber = data * 1000;\n    let formattedDate = convert(dateNumber);\n\n    function convertMonth(monthNum) {\n      let monthName = null;\n      // eslint-disable-next-line\n      switch (monthNum) {\n        case 0:\n          monthName = 'January';\n          break;\n        case 1:\n          monthName = 'February';\n          break;\n        case 2:\n          monthName = 'March';\n          break;\n        case 3:\n          monthName = 'April';\n          break;\n        case 4:\n          monthName = 'May';\n          break;\n        case 5:\n          monthName = 'June';\n          break;\n        case 6:\n          monthName = 'July';\n          break;\n        case 7:\n          monthName = 'August';\n          break;\n        case 8:\n          monthName = 'September';\n          break;\n        case 9:\n          monthName = 'October';\n          break;\n        case 10:\n          monthName = 'November';\n          break;\n        case 11:\n          monthName = 'December';\n          break;\n      }\n      return monthName;\n    }\n\n    let month = convertMonth(formattedDate.month);\n\n    let dateString = `${month} ${formattedDate.date}, ${formattedDate.year}`;\n    return dateString;\n  };\n\n  let getWindDirection = data => {\n    let windDirection = null;\n    let windDegrees = data;\n\n    switch (windDegrees) {\n      case 0:\n      case 360:\n        windDirection = 'up';\n        break;\n      case 90:\n        windDirection = 'left';\n        break;\n      case 180:\n        windDirection = 'down';\n        break;\n      case 270:\n        windDirection = 'left';\n        break;\n      default:\n        if (windDegrees > 0 && windDegrees < 90) windDirection = 'up-right';\n        if (windDegrees > 90 && windDegrees < 180) windDirection = 'down-right';\n        if (windDegrees > 180 && windDegrees < 270) windDirection = 'down-left';\n        if (windDegrees > 270 && windDegrees < 360) windDirection = 'up-left';\n    }\n\n    return windDirection;\n  };\n\n  let parsedCityData = {\n    cityName: res.data.city.name,\n    population: res.data.city.population,\n    weatherStatusDescription: res.data.list[0].weather[0].description,\n    weatherId: res.data.list[0].weather[0].id,\n    weatherDate: getDate(res.data.list[0].dt),\n    weatherTemp: round(res.data.list[0].main.temp),\n    weatherHumidity: round(res.data.list[0].main.humidity),\n    weatherWindSpeed: res.data.list[0].wind.speed,\n    weatherWindDirection: getWindDirection(res.data.list[0].wind.deg)\n  };\n\n  // console.log('[parseCityData] parsedCityData ', parsedCityData);\n\n  return parsedCityData;\n}\n\nexport default parseCityData;\n","const handleFocus = event => {\n  console.log('handleFocus called');\n  event.currentTarget.select();\n};\n\nexport default handleFocus;\n","import React from 'react';\nimport './Unsplash.scss';\n\n// const LeftArrow = props => {\n//   return (\n//     <div className=\"arrow backArrow\" onClick={props.goToPrevSlide}>\n//       &#8602;\n//     </div>\n//   );\n// };\n\n// const RightArrow = props => {\n//   return (\n//     <div className=\"arrow nextArrow\" onClick={props.goToNextSlide}>\n//       &#8603;\n//     </div>\n//   );\n// };\n\nconst Image = ({ image }) => {\n  const styles = {\n    backgroundImage: `url('${image}')`,\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: '50% 60%'\n  };\n\n  return <div className=\"Unsplash__image\" style={styles} />;\n};\n\nconst Unsplash = props => {\n  // props.pics;\n  console.log('[Unsplash] ', props);\n\n  // let currentIndex = 0;\n  // let translateValue = 0;\n\n  // const goToPrevSlide = () => {\n  //   console.log('goToPrevSlide, current index: ', currentIndex);\n  // };\n\n  // const goToNextSlide = () => {\n  //   console.log('goToNextSlide, currentIndex: ', currentIndex);\n  // };\n\n  // slideWidth = () => {\n  //   return document.querySelector('.Unsplash__image').clientWidth;\n  // };\n\n  return (\n    <div className=\"Unsplash\">\n      {<Image key=\"test\" image={props.pics[3].urls.regular} />}\n\n      {/* <LeftArrow goToPrevSlide={this.goToPrevSlide} />\n\n      <RightArrow goToNextSlide={this.goToNextSlide} /> */}\n    </div>\n  );\n};\n\nexport default Unsplash;\n","import React from 'react';\nimport './Weather.scss';\n\nconst Weather = props => {\n  return (\n    <div className=\"Weather\">\n      <div className=\"Weather__description\">\n        <p>{props.weatherTemp}&#176;</p>\n\n        <span className=\"icon\">\n          <i className={`wi wi-owm-${props.weatherId}`} />\n        </span>\n\n        <p>{props.weatherStatusDescription}</p>\n      </div>\n\n      <div className=\"Weather__misc\">\n        <p>Humidity: {props.weatherHumidity}%</p>\n\n        <span className=\"icon\">\n          <i className={`wi wi-direction-${props.weatherWindDirection}`} />\n        </span>\n\n        <p>Wind: {props.weatherWindSpeed} mph</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport './City.scss';\nimport './Search.scss';\nimport axios from 'axios';\nimport getOpenWeatherUrl from '../../logic/getOpenWeatherUrl';\nimport parseCityData from '../../logic/parseCityData';\nimport handleFocus from '../../logic/handleFocus';\nimport { unsplashKey } from '../../api/unsplashKey';\nimport Unsplash from '../Unsplash/UnsplashOriginal';\nimport Weather from '../../components/Weather/Weather';\n\nclass City extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      key: props.key,\n      // loading: false,\n      error: null,\n      cityName: null,\n      population: null,\n      weatherStatusDescription: null,\n      weatherId: null,\n      weatherDate: null,\n      weatherTemp: null,\n      weatherHumidity: null,\n      weatherWindSpeed: null,\n      weatherWindDirection: null,\n      unsplashPics: null\n    };\n  }\n\n  renderLoading() {\n    return <div className=\"City__loading\">Loading...</div>;\n  }\n\n  renderPicsLoading() {\n    return <div className=\"City__loading\">Loading pics..</div>;\n  }\n\n  getUnsplashPics(cityName) {\n    // console.log(cityName);\n\n    axios\n      .get(\n        `https://api.unsplash.com/search/photos?query=${cityName}&per_page=50&client_id=${unsplashKey}`\n      )\n      .then(res => {\n        console.log('[City] getUnsplashPics(), res is ', res);\n        if (res.data.total === 0) {\n          console.log('[City] getUnsplashPics() did not find any results for that location');\n          return;\n        }\n        let picsArray = [...res.data.results];\n        console.log('[City] picsArray is ', picsArray);\n        this.setState({\n          unsplashPics: picsArray\n        });\n      })\n      .catch(err => {\n        this.setState({\n          // loading: false,\n          error: 'Error from getUnsplashPics ',\n          err\n        });\n      });\n  }\n\n  getCityInfo(url) {\n    axios\n      .get(url)\n      .then(res => {\n        let parsedCityData = parseCityData(res);\n\n        this.setState({\n          // loading: false,\n          cityName: parsedCityData.cityName,\n          population: parsedCityData.population,\n          weatherStatusDescription: parsedCityData.weatherStatusDescription,\n          weatherId: parsedCityData.weatherId,\n          weatherDate: parsedCityData.weatherDate,\n          weatherTemp: parsedCityData.weatherTemp,\n          weatherHumidity: parsedCityData.weatherHumidity,\n          weatherWindSpeed: parsedCityData.weatherWindSpeed,\n          weatherWindDirection: parsedCityData.weatherWindDirection\n        });\n      })\n      .then(() => {\n        console.log(this.state.cityName);\n        this.getUnsplashPics(this.state.cityName);\n      })\n      .catch(err => {\n        this.setState({\n          loading: false,\n          error: 'Error from getCityInfo',\n          err\n        });\n      });\n  }\n\n  findCurrentLocation = () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        let openWeatherUrl = getOpenWeatherUrl(position.coords);\n        this.getCityInfo(openWeatherUrl);\n      });\n    } else {\n      this.setState({\n        error: 'Error in [City.jsx] at findCurrentLocation - geolocation not found.'\n      });\n    }\n  };\n\n  // ? Need to use ref????\n  searchHandler = () => {\n    let input = document.getElementById('searchInput');\n    let autocomplete = new window.google.maps.places.Autocomplete(input, {\n      types: ['(cities)']\n    });\n    window.google.maps.event.addListener(autocomplete, 'place_changed', () => {\n      let place = autocomplete.getPlace();\n\n      // let city = place.name; // Dont need really\n      let lat = place.geometry.location.lat();\n      let lng = place.geometry.location.lng();\n      // console.log('[City] searchHandler...', lat, lng);\n\n      let position = {\n        latitude: lat,\n        longitude: lng\n      };\n      let openWeatherUrl = getOpenWeatherUrl(position);\n\n      this.getCityInfo(openWeatherUrl);\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"City\">\n        {!this.state.cityName ? (\n          <div className=\"City__wrapper\">\n            <div className=\"City__doubleButton\">\n              <button onClick={this.findCurrentLocation}>Current Location</button>\n              <span className=\"or\">or</span>\n              <input\n                id=\"searchInput\"\n                placeholder=\"Enter city\"\n                type=\"text\"\n                onChange={this.searchHandler}\n                onFocus={handleFocus}\n              />\n            </div>\n          </div>\n        ) : (\n          <div className=\"City__wrapper\">\n            <div className=\"City__doubleButton\">\n              <button onClick={this.findCurrentLocation}>Current Location</button>\n              <span className=\"or\">or</span>\n              <input\n                id=\"searchInput\"\n                placeholder=\"Enter city\"\n                type=\"text\"\n                onChange={this.searchHandler}\n                onFocus={handleFocus}\n              />\n            </div>\n\n            <div className=\"City__display\">\n              <div className=\"City__display-info\">\n                <p>\n                  {this.state.cityName}, population of {this.state.population}\n                </p>\n              </div>\n\n              <Weather\n                key=\"weather\"\n                cityName={this.state.cityName}\n                weatherStatusDescription={this.state.weatherStatusDescription}\n                weatherId={this.state.weatherId}\n                weatherDate={this.state.weatherDate}\n                weatherTemp={this.state.weatherTemp}\n                weatherMin={this.state.weatherMin}\n                weatherMax={this.state.weatherMax}\n                weatherHumidity={this.state.weatherHumidity}\n                weatherWindSpeed={this.state.weatherWindSpeed}\n                weatherWindDirection={this.state.weatherWindDirection}\n              />\n\n              {!this.state.unsplashPics ? (\n                <div className=\"City__display-noImages\">\n                  <p>No images found for location</p>\n                </div>\n              ) : (\n                <Unsplash key=\"unsplash\" pics={this.state.unsplashPics} />\n              )}\n            </div>\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default City;\n","export const unsplashKey = '11f2ff5a50fcce4df43aa4c897d132d3f5ad4a84ed0aec7be67718deb5120192';\n","import React from 'react';\nimport './App.scss';\nimport City from './containers/City/City';\n\nconst App = props => (\n  <div className=\"App\">\n    {/* <header className=\"App__header\">\n      <h1 className=\"App__title\">Compare Cities</h1>\n    </header> */}\n    <main className=\"App__cityWrapper\">\n      <City key=\"left\" />\n      <City key=\"right\" />\n    </main>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// To get Hot Module Reloading... https://daveceddia.com/hot-reloading-create-react-app/\n// if (module.hot) {\n//   module.hot.accept();\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}